// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PARTICIPANT
  BRAND
  ADMIN
}

enum BrandStatus {
  PENDING
  ACTIVE
  REJECTED
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String?
  role        UserRole
  participant Participant?
  brand       Brand?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Participation {
  id            String      @id @default(cuid())
  participantId String
  participant   Participant @relation(fields: [participantId], references: [id])
  challengeId   String
  challenge     Challenge   @relation(fields: [challengeId], references: [id])
  amount        Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Participant {
  id             String              @id @default(cuid())
  userId         String              @unique
  user           User                @relation(fields: [userId], references: [id])
  wonRewards     ParticipantReward[]
  product        Product[]
  disposal       Disposal[]
  participations Participation[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Brand {
  id          String      @id @default(cuid())
  name        String
  challenges  Challenge[]
  products    Product[]
  userId      String      @unique
  description String?
  logoUrl     String?
  user        User        @relation(fields: [userId], references: [id])
  status      BrandStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ParticipantReward {
  rewardId      String
  reward        Reward       @relation(fields: [rewardId], references: [id])
  assignedAt    DateTime
  Participant   Participant? @relation(fields: [participantId], references: [id])
  participantId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@id([participantId, rewardId])
}

model Disposal {
  id               String            @id @default(cuid())
  date             DateTime
  bin              Bin               @relation(fields: [binId], references: [id])
  disposedProducts DisposedProduct[]
  binId            String
  participantId    String
  Participant      Participant?      @relation(fields: [participantId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model DisposedProduct {
  id         String    @id @default(cuid())
  product    Product   @relation(fields: [productId], references: [id])
  amount     Int
  disposal   Disposal? @relation(fields: [disposalId], references: [id])
  disposalId String?
  productId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Bin {
  id        String     @id @default(cuid())
  label     String
  type      String
  longitude Float
  latitude  Float
  userId    String?
  Disposal  Disposal[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Challenge {
  id                String             @id @default(cuid())
  label             String
  status            String
  endDate           DateTime
  description       String
  goal              Int
  brandId           String
  brand             Brand              @relation(fields: [brandId], references: [id])
  rewards           Reward[]
  participations    Participation[]
  challengeProducts ChallengeProduct[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt()
}

model Reward {
  id           String              @id @default(cuid())
  label        String
  amount       Int
  challengeId  String
  challenge    Challenge           @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  participants ParticipantReward[]
  imageUrl     String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt()
}

model ChallengeProduct {
  id          String    @id @default(cuid())
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
}

model Product {
  id                String             @id @default(cuid())
  label             String
  material          String
  brandId           String?
  brand             Brand?             @relation(fields: [brandId], references: [id])
  disposedProducts  DisposedProduct[]
  participant       Participant?       @relation(fields: [participantId], references: [id])
  participantId     String?
  challengeProducts ChallengeProduct[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt()
}
