// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PARTICIPANT
  BRAND
  ADMIN
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String?
  role        UserRole
  participant Participant?
  brand       Brand?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Participant {
  id                      String              @id @default(cuid())
  userId                  String              @unique
  user                    User                @relation(fields: [userId], references: [id])
  participatingChallenges Challenge[]
  wonRewards              ParticipantReward[]
  product                 Product[]
  disposal                Disposal[]
}

model Brand {
  id         String      @id @default(cuid())
  name       String
  challenges Challenge[]
  products   Product[]
  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id])
}

model ParticipantReward {
  rewardId      String
  reward        Reward       @relation(fields: [rewardId], references: [id])
  assignedAt    DateTime
  Participant   Participant? @relation(fields: [participantId], references: [id])
  participantId String

  @@id([participantId, rewardId])
}

model Disposal {
  id               String            @id @default(cuid())
  date             DateTime
  bin              Bin               @relation(fields: [binId], references: [id])
  disposedProducts DisposedProduct[]
  binId            String
  participantId    String
  Participant      Participant?      @relation(fields: [participantId], references: [id])
}

model DisposedProduct {
  id         String    @id @default(cuid())
  product    Product   @relation(fields: [productId], references: [id])
  amount     Int
  disposal   Disposal? @relation(fields: [disposalId], references: [id])
  disposalId String?
  productId  String
}

model Bin {
  id        String     @id @default(cuid())
  label     String
  type      String
  longitude Float
  latitude  Float
  userId    String?
  Disposal  Disposal[]
}

model Challenge {
  id           String        @id @default(cuid())
  label        String
  status       String
  endDate      DateTime
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
  goal         Int
  brandId      String
  brand        Brand         @relation(fields: [brandId], references: [id])
  rewards      Reward[]
  participants Participant[]
  products     Product[]
}

model Reward {
  id           String              @id @default(cuid())
  label        String
  amount       Int
  challengeId  String
  challenge    Challenge           @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  participants ParticipantReward[]
}

model Product {
  id              String            @id @default(cuid())
  label           String
  material        String
  brandId         String?
  brand           Brand?            @relation(fields: [brandId], references: [id])
  challengeId     String?
  challenge       Challenge?        @relation(fields: [challengeId], references: [id])
  DisposedProduct DisposedProduct[]
  participant     Participant?      @relation(fields: [participantId], references: [id])
  participantId   String?
}
